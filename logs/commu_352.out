🚀 作业开始于: Wed Jun 25 07:25:56 UTC 2025
📌 节点: c03
🔧 使用 CPU 核数: 8
Using device: cpu
Loading data to collect Chinese vocabulary for GPT-2...
Found 20 unique Chinese words/characters to add to GPT-2 tokenizer.
Loading and configuring GPT-2...
GPT-2 tokenizer vocabulary extended. New size: 50277
GPT-2 model embedding layer resized.
Loading CPM...

--- Starting 4 rounds of interaction (Verbose Mode) ---


========================= 游戏回合 1 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: GPT-2
    👂  Listener: CPM

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: 'airplane'
    Speaker生成的描述: ''A machine that flies through the air with the help of a pilot.'

The first airplane was invented by Dutch scientist Jan Van Leeuwen'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['老师', '橘子', '学校', '飞机']
    (本轮正确答案是索引 3: '飞机')
    计算出的相似度:
        - 选项 '老师': 0.8136
        - 选项 '橘子': 0.8503
        - 选项 '学校': 0.8311
        - 选项 '飞机': 0.5609
    Listener的选择: 索引 1 -> '橘子'
    ❌ 结论: 猜测错误！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.5960
        - 奖惩系数: 1.10 (惩罚)
        -  => 最终 Listener Loss = 1.7556
    [B] Alignment Loss (吸引力):
        - 目标: 拉近''A machine that flie...'和'飞机'的语义距离
        -  => 计算出的 Alignment Loss = -0.0456
    [C] Anti-Alignment Loss (排斥力):
        - 目标: 推远''A machine that flie...'和被错选的'橘子'的语义距离
        -  => 计算出的 Anti-Alignment Loss = 0.0413
    [D] Contrastive Loss (区分力):
        - 目标: 让''A machine that flie...'与'飞机'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 1.2805
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.7556 + (0.5 * -0.0456) + (0.5 * 0.0413) + (0.5 * 1.2805)
                   = 1.7556 + -0.0228 + 0.0207 + 0.6403
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 2.3937

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 GPT-2 的权重...
    执行 listener.optimizer.step() 更新 CPM 的权重...
    ✅ 更新完成!


========================= 游戏回合 2 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: CPM
    👂  Listener: GPT-2

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: '飞机'
    Speaker生成的描述: '本书配有一张光盘,包括教程和大量的视频,用于读者的练习,同时也适合有一定'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['airplane', 'teacher', 'school', 'orange']
    (本轮正确答案是索引 0: 'airplane')
    计算出的相似度:
        - 选项 'airplane': 0.1527
        - 选项 'teacher': 0.1035
        - 选项 'school': 0.1409
        - 选项 'orange': 0.2197
    Listener的选择: 索引 3 -> 'orange'
    ❌ 结论: 猜测错误！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.3887
        - 奖惩系数: 1.10 (惩罚)
        -  => 最终 Listener Loss = 1.5276
    [B] Alignment Loss (吸引力):
        - 目标: 拉近'本书配有一张光盘,包括教程和大量的视频,...'和'airplane'的语义距离
        -  => 计算出的 Alignment Loss = -0.0637
    [C] Anti-Alignment Loss (排斥力):
        - 目标: 推远'本书配有一张光盘,包括教程和大量的视频,...'和被错选的'orange'的语义距离
        -  => 计算出的 Anti-Alignment Loss = 0.0690
    [D] Contrastive Loss (区分力):
        - 目标: 让'本书配有一张光盘,包括教程和大量的视频,...'与'airplane'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 1.1636
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.5276 + (0.5 * -0.0637) + (0.5 * 0.0690) + (0.5 * 1.1636)
                   = 1.5276 + -0.0319 + 0.0345 + 0.5818
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 2.1120

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 CPM 的权重...
    执行 listener.optimizer.step() 更新 GPT-2 的权重...
    ✅ 更新完成!


========================= 游戏回合 3 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: GPT-2
    👂  Listener: CPM

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: 'cat'
    Speaker生成的描述: 'A cat is a mammal that has a short back with a long face.

The human form of the cat is the domestic cat.'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['沙发', '书本', '狗', '猫']
    (本轮正确答案是索引 3: '猫')
    计算出的相似度:
        - 选项 '沙发': 0.8712
        - 选项 '书本': 0.8135
        - 选项 '狗': 0.8381
        - 选项 '猫': 0.8539
    Listener的选择: 索引 0 -> '沙发'
    ❌ 结论: 猜测错误！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.3768
        - 奖惩系数: 1.10 (惩罚)
        -  => 最终 Listener Loss = 1.5145
    [B] Alignment Loss (吸引力):
        - 目标: 拉近'A cat is a mammal th...'和'猫'的语义距离
        -  => 计算出的 Alignment Loss = -0.0585
    [C] Anti-Alignment Loss (排斥力):
        - 目标: 推远'A cat is a mammal th...'和被错选的'沙发'的语义距离
        -  => 计算出的 Anti-Alignment Loss = 0.0048
    [D] Contrastive Loss (区分力):
        - 目标: 让'A cat is a mammal th...'与'猫'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 1.1967
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.5145 + (0.5 * -0.0585) + (0.5 * 0.0048) + (0.5 * 1.1967)
                   = 1.5145 + -0.0292 + 0.0024 + 0.5983
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 2.0860

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 GPT-2 的权重...
    执行 listener.optimizer.step() 更新 CPM 的权重...
    ✅ 更新完成!


========================= 游戏回合 4 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: CPM
    👂  Listener: GPT-2

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: '猫'
    Speaker生成的描述: '小河弯弯,'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['dog', 'sofa', 'cat', 'book']
    (本轮正确答案是索引 2: 'cat')
    计算出的相似度:
        - 选项 'dog': 0.2328
        - 选项 'sofa': 0.2852
        - 选项 'cat': 0.3157
        - 选项 'book': 0.2316
    Listener的选择: 索引 2 -> 'cat'
    ✅ 结论: 猜测正确！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.3376
        - 奖惩系数: 0.90 (奖励)
        -  => 最终 Listener Loss = 1.2038
    [B] Alignment Loss (吸引力):
        - 目标: 拉近'小河弯弯,...'和'cat'的语义距离
        -  => 计算出的 Alignment Loss = -0.0312
    [C] Anti-Alignment Loss (排斥力):
        - (猜测正确，无需计算此项损失)
    [D] Contrastive Loss (区分力):
        - 目标: 让'小河弯弯,...'与'cat'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 1.4311
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.2038 + (0.5 * -0.0312) + (0.5 * 0.0000) + (0.5 * 1.4311)
                   = 1.2038 + -0.0156 + 0.0000 + 0.7155
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 1.9038

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 CPM 的权重...
    执行 listener.optimizer.step() 更新 GPT-2 的权重...
    ✅ 更新完成!


========================= 训练结束 =========================
✅ 准确率: 25.00% | 平均损失: 2.1239
📄 详细结果已保存至: /ubsnhome/23063003r/refgame_project/output/final_training_run_results_verbose.json
✅ 作业结束于: Wed Jun 25 07:27:32 UTC 2025
