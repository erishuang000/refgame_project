🚀 作业开始于: Wed Jun 25 07:09:21 UTC 2025
📌 节点: c03
🔧 使用 CPU 核数: 8
Using device: cpu
Loading data to collect Chinese vocabulary for GPT-2...
Found 20 unique Chinese words/characters to add to GPT-2 tokenizer.
Loading and configuring GPT-2...
GPT-2 tokenizer vocabulary extended. New size: 50277
GPT-2 model embedding layer resized.
Loading CPM...

--- Starting 4 rounds of interaction (Verbose Mode) ---


========================= 游戏回合 1 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: GPT-2
    👂  Listener: CPM

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: 'airplane'
    Speaker生成的描述: 'Airplane is a type of airplane which can be flown from the ground or from the air in all weather conditions.'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['老师', '学校', '橘子', '飞机']
    (本轮正确答案是索引 3: '飞机')
    计算出的相似度:
        - 选项 '老师': 0.8281
        - 选项 '学校': 0.8298
        - 选项 '橘子': 0.8536
        - 选项 '飞机': 0.8597
    Listener的选择: 索引 3 -> '飞机'
    ✅ 结论: 猜测正确！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.3695
        - 奖惩系数: 0.90 (奖励)
        -  => 最终 Listener Loss = 1.2325
    [B] Alignment Loss (吸引力):
        - 目标: 拉近'Airplane is a type o...'和'飞机'的语义距离
        -  => 计算出的 Alignment Loss = -0.1058
    [C] Anti-Alignment Loss (排斥力):
        - (猜测正确，无需计算此项损失)
    [D] Contrastive Loss (区分力):
        - 目标: 让'Airplane is a type o...'与'飞机'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 1.3770
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.2325 + (0.5 * -0.1058) + (0.5 * 0.0000) + (0.5 * 1.3770)
                   = 1.2325 + -0.0529 + 0.0000 + 0.6885
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 1.8681

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 GPT-2 的权重...
    执行 listener.optimizer.step() 更新 CPM 的权重...
    ✅ 更新完成!


========================= 游戏回合 2 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: CPM
    👂  Listener: GPT-2

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: '飞机'
    Speaker生成的描述: '简单描述一下这个概念:飞机描述:物体:物体是飞机,但是物体的组成是物体的组成,比如物'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['teacher', 'school', 'airplane', 'orange']
    (本轮正确答案是索引 2: 'airplane')
    计算出的相似度:
        - 选项 'teacher': 0.1445
        - 选项 'school': 0.0841
        - 选项 'airplane': 0.1018
        - 选项 'orange': 0.1629
    Listener的选择: 索引 3 -> 'orange'
    ❌ 结论: 猜测错误！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.4083
        - 奖惩系数: 1.10 (惩罚)
        -  => 最终 Listener Loss = 1.5491
    [B] Alignment Loss (吸引力):
        - 目标: 拉近'简单描述一下这个概念:飞机描述:物体:物...'和'airplane'的语义距离
        -  => 计算出的 Alignment Loss = -0.1135
    [C] Anti-Alignment Loss (排斥力):
        - 目标: 推远'简单描述一下这个概念:飞机描述:物体:物...'和被错选的'orange'的语义距离
        -  => 计算出的 Anti-Alignment Loss = 0.0845
    [D] Contrastive Loss (区分力):
        - 目标: 让'简单描述一下这个概念:飞机描述:物体:物...'与'airplane'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 0.9279
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.5491 + (0.5 * -0.1135) + (0.5 * 0.0845) + (0.5 * 0.9279)
                   = 1.5491 + -0.0568 + 0.0423 + 0.4640
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 1.9986

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 CPM 的权重...
    执行 listener.optimizer.step() 更新 GPT-2 的权重...
    ✅ 更新完成!


========================= 游戏回合 3 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: GPT-2
    👂  Listener: CPM

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: 'cat'
    Speaker生成的描述: ''A cat is a large mammal that typically lives in the wild on the outskirts of human civilization. They are generally solitary, and are often'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['狗', '书本', '沙发', '猫']
    (本轮正确答案是索引 3: '猫')
    计算出的相似度:
        - 选项 '狗': 0.6144
        - 选项 '书本': 0.8110
        - 选项 '沙发': 0.7780
        - 选项 '猫': 0.8688
    Listener的选择: 索引 3 -> '猫'
    ✅ 结论: 猜测正确！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.2899
        - 奖惩系数: 0.90 (奖励)
        -  => 最终 Listener Loss = 1.1609
    [B] Alignment Loss (吸引力):
        - 目标: 拉近''A cat is a large ma...'和'猫'的语义距离
        -  => 计算出的 Alignment Loss = -0.0718
    [C] Anti-Alignment Loss (排斥力):
        - (猜测正确，无需计算此项损失)
    [D] Contrastive Loss (区分力):
        - 目标: 让''A cat is a large ma...'与'猫'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 1.2838
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.1609 + (0.5 * -0.0718) + (0.5 * 0.0000) + (0.5 * 1.2838)
                   = 1.1609 + -0.0359 + 0.0000 + 0.6419
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 1.7669

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 GPT-2 的权重...
    执行 listener.optimizer.step() 更新 CPM 的权重...
    ✅ 更新完成!


========================= 游戏回合 4 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: CPM
    👂  Listener: GPT-2

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: '猫'
    Speaker生成的描述: '简单描述一下这个概念:猫描述:这里用猫指代一个状态,“”是一个状态,“”是'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['book', 'cat', 'dog', 'sofa']
    (本轮正确答案是索引 1: 'cat')
    计算出的相似度:
        - 选项 'book': 0.2940
        - 选项 'cat': 0.3407
        - 选项 'dog': 0.2604
        - 选项 'sofa': 0.2553
    Listener的选择: 索引 1 -> 'cat'
    ✅ 结论: 猜测正确！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.3337
        - 奖惩系数: 0.90 (奖励)
        -  => 最终 Listener Loss = 1.2004
    [B] Alignment Loss (吸引力):
        - 目标: 拉近'简单描述一下这个概念:猫描述:这里用猫指...'和'cat'的语义距离
        -  => 计算出的 Alignment Loss = -0.1302
    [C] Anti-Alignment Loss (排斥力):
        - (猜测正确，无需计算此项损失)
    [D] Contrastive Loss (区分力):
        - 目标: 让'简单描述一下这个概念:猫描述:这里用猫指...'与'cat'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 0.9458
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.2004 + (0.5 * -0.1302) + (0.5 * 0.0000) + (0.5 * 0.9458)
                   = 1.2004 + -0.0651 + 0.0000 + 0.4729
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 1.6082

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 CPM 的权重...
    执行 listener.optimizer.step() 更新 GPT-2 的权重...
    ✅ 更新完成!


========================= 训练结束 =========================
✅ 准确率: 75.00% | 平均损失: 1.8104
📄 详细结果已保存至: /ubsnhome/23063003r/refgame_project/output/final_training_run_results_verbose.json
✅ 作业结束于: Wed Jun 25 07:10:52 UTC 2025
