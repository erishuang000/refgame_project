🚀 作业开始于: Wed Jun 25 06:56:35 UTC 2025
📌 节点: c03
🔧 使用 CPU 核数: 8
Using device: cpu
Loading data to collect Chinese vocabulary for GPT-2...
Found 20 unique Chinese words/characters to add to GPT-2 tokenizer.
Loading and configuring GPT-2...
GPT-2 tokenizer vocabulary extended. New size: 50277
GPT-2 model embedding layer resized.
Loading CPM...

--- Starting 4 rounds of interaction (Verbose Mode) ---


========================= 游戏回合 1 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: GPT-2
    👂  Listener: CPM

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: 'airplane'
    Speaker生成的描述: '"An airplane is a mass of metal and a gas, with a lift produced by an engine. In the case of a gas, the'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['学校', '橘子', '飞机', '老师']
    (本轮正确答案是索引 2: '飞机')
    计算出的相似度:
        - 选项 '学校': 0.8320
        - 选项 '橘子': 0.8328
        - 选项 '飞机': 0.8560
        - 选项 '老师': 0.8576
    Listener的选择: 索引 3 -> '老师'
    ❌ 结论: 猜测错误！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.3749
        - 奖惩系数: 1.10 (惩罚)
        -  => 最终 Listener Loss = 1.5124
    [B] Alignment Loss (吸引力):
        - 目标: 拉近'"An airplane is a ma...'和'飞机'的语义距离
        -  => 计算出的 Alignment Loss = -0.0085
    [C] Anti-Alignment Loss (排斥力):
        - 目标: 推远'"An airplane is a ma...'和被错选的'老师'的语义距离
        -  => 计算出的 Anti-Alignment Loss = 0.0103
    [D] Contrastive Loss (区分力):
        - 目标: 让'"An airplane is a ma...'与'飞机'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 1.3485
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.5124 + (0.5 * -0.0085) + (0.5 * 0.0103) + (0.5 * 1.3485)
                   = 1.5124 + -0.0042 + 0.0051 + 0.6743
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 2.1876

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 GPT-2 的权重...
    执行 listener.optimizer.step() 更新 CPM 的权重...
    ✅ 更新完成!


========================= 游戏回合 2 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: CPM
    👂  Listener: GPT-2

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: '飞机'
    Speaker生成的描述: '''''''''''''''''

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['teacher', 'orange', 'school', 'airplane']
    (本轮正确答案是索引 3: 'airplane')
    计算出的相似度:
        - 选项 'teacher': 0.3072
        - 选项 'orange': 0.3442
        - 选项 'school': 0.2895
        - 选项 'airplane': 0.2528
    Listener的选择: 索引 1 -> 'orange'
    ❌ 结论: 猜测错误！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.4325
        - 奖惩系数: 1.10 (惩罚)
        -  => 最终 Listener Loss = 1.5757
    [B] Alignment Loss (吸引力):
        - 目标: 拉近''''''''''''''''...'和'airplane'的语义距离
        -  => 计算出的 Alignment Loss = -0.0252
    [C] Anti-Alignment Loss (排斥力):
        - 目标: 推远''''''''''''''''...'和被错选的'orange'的语义距离
        -  => 计算出的 Anti-Alignment Loss = -0.0080
    [D] Contrastive Loss (区分力):
        - 目标: 让''''''''''''''''...'与'airplane'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 1.4079
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.5757 + (0.5 * -0.0252) + (0.5 * -0.0080) + (0.5 * 1.4079)
                   = 1.5757 + -0.0126 + -0.0040 + 0.7039
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 2.2630

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 CPM 的权重...
    执行 listener.optimizer.step() 更新 GPT-2 的权重...
    ✅ 更新完成!


========================= 游戏回合 3 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: GPT-2
    👂  Listener: CPM

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: 'cat'
    Speaker生成的描述: 'a cat is a furry mammal with a short tail, which is not particularly useful for catching prey.'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['狗', '沙发', '猫', '书本']
    (本轮正确答案是索引 2: '猫')
    计算出的相似度:
        - 选项 '狗': 0.7901
        - 选项 '沙发': 0.8430
        - 选项 '猫': 0.7941
        - 选项 '书本': 0.7993
    Listener的选择: 索引 1 -> '沙发'
    ❌ 结论: 猜测错误！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.3991
        - 奖惩系数: 1.10 (惩罚)
        -  => 最终 Listener Loss = 1.5390
    [B] Alignment Loss (吸引力):
        - 目标: 拉近'a cat is a furry mam...'和'猫'的语义距离
        -  => 计算出的 Alignment Loss = -0.0357
    [C] Anti-Alignment Loss (排斥力):
        - 目标: 推远'a cat is a furry mam...'和被错选的'沙发'的语义距离
        -  => 计算出的 Anti-Alignment Loss = -0.0132
    [D] Contrastive Loss (区分力):
        - 目标: 让'a cat is a furry mam...'与'猫'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 1.5550
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.5390 + (0.5 * -0.0357) + (0.5 * -0.0132) + (0.5 * 1.5550)
                   = 1.5390 + -0.0179 + -0.0066 + 0.7775
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 2.2920

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 GPT-2 的权重...
    执行 listener.optimizer.step() 更新 CPM 的权重...
    ✅ 更新完成!


========================= 游戏回合 4 =========================

▶️  阶段 1: 角色分配与任务设置
    🗣️  Speaker: CPM
    👂  Listener: GPT-2

▶️  阶段 2: Speaker 生成描述
    Speaker接收到的概念: '猫'
    Speaker生成的描述: 'It's flannel work 'cats' 'cats'

▶️  阶段 3: Listener 理解与猜测
    Listener接收到的选项: ['dog', 'book', 'sofa', 'cat']
    (本轮正确答案是索引 3: 'cat')
    计算出的相似度:
        - 选项 'dog': 0.5642
        - 选项 'book': 0.5284
        - 选项 'sofa': 0.5756
        - 选项 'cat': 0.3887
    Listener的选择: 索引 2 -> 'sofa'
    ❌ 结论: 猜测错误！

▶️  阶段 4: 复合损失计算 (详细分解)
    [A] Listener Loss:
        - 基础交叉熵损失: 1.5145
        - 奖惩系数: 1.10 (惩罚)
        -  => 最终 Listener Loss = 1.6660
    [B] Alignment Loss (吸引力):
        - 目标: 拉近'It's flannel work 'c...'和'cat'的语义距离
        -  => 计算出的 Alignment Loss = -0.0641
    [C] Anti-Alignment Loss (排斥力):
        - 目标: 推远'It's flannel work 'c...'和被错选的'sofa'的语义距离
        -  => 计算出的 Anti-Alignment Loss = 0.0065
    [D] Contrastive Loss (区分力):
        - 目标: 让'It's flannel work 'c...'与'cat'的相似度远高于其他所有选项
        -  => 计算出的 Contrastive Loss = 1.3851
    [E] 总损失计算:
        ----------------------------------------
        Total Loss = Listener_Loss + (W_align * Align_L) + (W_anti * Anti_L) + (W_contrast * Contrast_L)
                   = 1.6660 + (0.5 * -0.0641) + (0.5 * 0.0065) + (0.5 * 1.3851)
                   = 1.6660 + -0.0321 + 0.0033 + 0.6925
        ----------------------------------------
        ==> 💸 最终总损失 (Final Total Loss): 2.3297

▶️  阶段 5: 模型协同更新
    执行 total_loss.backward() 计算两个Agent所有相关参数的梯度...
    执行 speaker.optimizer.step() 更新 CPM 的权重...
    执行 listener.optimizer.step() 更新 GPT-2 的权重...
    ✅ 更新完成!


========================= 训练结束 =========================
✅ 准确率: 0.00% | 平均损失: 2.2681
📄 详细结果已保存至: /ubsnhome/23063003r/refgame_project/output/final_training_run_results_verbose.json
✅ 作业结束于: Wed Jun 25 06:58:16 UTC 2025
